<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-lazy-init="false">
	<context:component-scan base-package="com.hqyg.dubbo" />
	
	    <bean id="dubboBeanLoader" class="com.hqyg.dubbo.annotation.spring.BubboServiceBeanLoader">
        <property name="dubboZkAddress" value="zookeeper://39.108.235.200:2182"></property>
        <property name="dubboZkPort" value="20880"></property>
        <property name="packagePath" value="com.hqyg.dubbo.Provider.service.impl"></property>
    </bean>

		
<!-- 	====================mybatis数据源配置 ====================	 -->
    <!-- 引入jdbc配置文件 -->  
<!--     <context:property-placeholder location="classpath:jdbc.properties" />   -->
	    <!-- 引入配置文件 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
<!--     PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件   -->
        <property name="locations"> 
            <array>  
                <value>classpath:jdbc.properties</value>  
                <value>classpath:redis.properties</value>
                <value>classpath:dubbo.properties</value>   
            </array>  
        </property>  
    </bean>  

	<bean id="dataSource" name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">  
        <!-- 指定连接数据库的驱动-->  
        <property name="driverClass" value="${driver}"/>  
        <!-- 指定连接数据库的URL-->  
        <property name="jdbcUrl" value="${url}"/>  
        <!-- 指定连接数据库的用户名-->  
        <property name="user" value="${username}"/>  
        <!-- 指定连接数据库的密码-->  
        <property name="password" value="${password}"/>  
        <!-- 指定连接池中保留的最大连接数. Default:15-->  
<!--         <property name="maxPoolSize" value="${maxPoolSize}"/>   -->
<!--         指定连接池中保留的最小连接数   -->
<!--         <property name="minPoolSize" value="${minPoolSize}"/>   -->
<!--         指定连接池的初始化连接数  取值应在minPoolSize 与 maxPoolSize 之间.Default:3   -->
<!--         <property name="initialPoolSize" value="${initialPoolSize}"/>   -->
<!--         最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0   -->
<!--         <property name="maxIdleTime" value="${maxIdleTime}"/>   -->
<!--         当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3   -->
<!--         <property name="acquireIncrement" value="${acquireIncrement}"/>   -->
        <!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。  
        但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0-->  
<!--         <property name="maxStatements" value="${jdbc.maxStatements}"/>   -->
        <!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->  
<!--         <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>   -->
    </bean> 
	    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
<!--     <bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">   -->
<!--         <property name="dataSource" ref="dataSource" />   -->
<!--     </bean>  -->
	
	 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
	     <property name="dataSource" ref="dataSource" />  
	     <property name="configLocation" value="classpath:mybatis-config.xml"></property>  
	 </bean>  
	   <bean id="sqlSession"     class="org.mybatis.spring.SqlSessionTemplate">   
	       <constructor-arg  ref="sqlSessionFactory" />   
	 </bean>

    <context:annotation-config />
    <!-- ASPECTJ注解  -->
    <aop:aspectj-autoproxy proxy-target-class="true" />

<!-- 	 <import resource="application-redis.xml"/> -->
	 <import resource="dubbo-provider.xml" />
		
</beans>